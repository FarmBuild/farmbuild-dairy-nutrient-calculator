"use strict";angular.module("farmbuild.nutrientCalculator",["farmbuild.core","farmbuild.farmdata"]).factory("NutrientCalculator",function(MilkSold,CowsPurchased,CowsCulled,FarmData){var NutrientCalculator={};return NutrientCalculator.load=function(farmData){return FarmData.isFarmData(farmData)?(farmData.nutrientCalculator||(farmData.nutrientCalculator={milkSold:{},cowsCulled:{},cowsPurchased:{}}),farmData):void 0},NutrientCalculator.milkSold=MilkSold,NutrientCalculator.cowsPurchased=CowsPurchased,NutrientCalculator.cowsCulled=CowsCulled,window.farmbuild.nutrientcalculator=NutrientCalculator,NutrientCalculator}),angular.module("farmbuild.nutrientCalculator").factory("CowsCulled",function(Validations,references){var CowsCulled={},_isPositiveNumber=Validations.isPositiveNumber,_isAlphanumeric=Validations.isAlphanumeric,_types=references.cowTypes;return CowsCulled.calculate=function(cows){var NumberOfCows=0,weight=0,nitrogenInKg=0,phosphorusInKg=0,potassiumInKg=0,sulphurInKg=0,nitrogenPercentage=2.8,phosphorusPercentage=.72,potassiumPercentage=.2,sulphurPercentage=.8,incomings=[],i=0;if(!cows||0===cows.length)return void 0;for(i;i<cows.length;i++){var cowWeight,cowCount,cow=cows[i];if(!cow.weight||!cow.name)return void 0;if(cowWeight=cow.weight,cowCount=cow.NumberOfCows,!_isPositiveNumber(cowCount))return void 0;weight+=cowWeight*cowCount,NumberOfCows+=cowCount,nitrogenInKg+=nitrogenPercentage*cowWeight*cowCount/100,phosphorusInKg+=phosphorusPercentage*cowWeight*cowCount/100,potassiumInKg+=potassiumPercentage*cowWeight*cowCount/100,sulphurInKg+=sulphurPercentage*cowWeight*cowCount/100,incomings.push({name:cow.name,NumberOfCows:cowCount,weight:cow.weight})}return{cows:incomings,NumberOfCows:NumberOfCows,weight:weight,nitrogenInKg:nitrogenInKg,phosphorusInKg:phosphorusInKg,potassiumInKg:potassiumInKg,sulphurInKg:sulphurInKg}},CowsCulled.addType=function(name,weight){return _isPositiveNumber(weight)&&name&&_isAlphanumeric(name)?(weight=parseFloat(weight),_types.push({name:name,weight:weight}),CowsCulled):void 0},CowsCulled.removeTypeByName=function(name){return name?(angular.forEach(_types,function(type,i){type.name===name&&_types.splice(i,1)}),_types):void 0},CowsCulled.removeTypeByIndex=function(index){return!index||0>index?void 0:(_types.splice(index,1),_types)},CowsCulled.types=function(){return _types},CowsCulled}),angular.module("farmbuild.nutrientCalculator").factory("CowsPurchased",function(Validations,references){function _findType(toFind){var found;return angular.forEach(_types,function(type){type.name===toFind&&(found=type)}),found}var CowsPurchased={},_isPositiveNumber=Validations.isPositiveNumber,_isAlphanumeric=Validations.isAlphanumeric,_types=references.cowTypes;return CowsPurchased.calculate=function(cows){var cowType,numberOfCows=0,weight=0,nitrogenInKg=0,phosphorusInKg=0,potassiumInKg=0,sulphurInKg=0,nitrogenPercentage=2.8,phosphorusPercentage=.72,potassiumPercentage=.2,sulphurPercentage=.8,incomings=[],i=0;if(!cows||0===cows.length)return void 0;for(i;i<cows.length;i++){var cowWeight,cowCount,cow=cows[i];if(!cow.type||!_findType(cow.type))return void 0;if(cowType=_findType(cow.type),cowWeight=cowType.weight,cowCount=cow.numberOfCows,!_isPositiveNumber(cowCount))return void 0;weight+=cowWeight*cowCount,numberOfCows+=cowCount,nitrogenInKg+=nitrogenPercentage*cowWeight*cowCount/100,phosphorusInKg+=phosphorusPercentage*cowWeight*cowCount/100,potassiumInKg+=potassiumPercentage*cowWeight*cowCount/100,sulphurInKg+=sulphurPercentage*cowWeight*cowCount/100,incomings.push({name:cowType.name,numberOfCows:cowCount,weight:cowType.weight})}return{cows:incomings,numberOfCows:numberOfCows,weight:weight,nitrogenInKg:nitrogenInKg,phosphorusInKg:phosphorusInKg,potassiumInKg:potassiumInKg,sulphurInKg:sulphurInKg}},CowsPurchased.addType=function(name,weight){return _isPositiveNumber(weight)&&name&&_isAlphanumeric(name)?(weight=parseFloat(weight),_types.push({name:name,weight:weight}),CowsPurchased):void 0},CowsPurchased.removeTypeByName=function(name){return name?(angular.forEach(_types,function(type,i){type.name===name&&_types.splice(i,1)}),_types):void 0},CowsPurchased.removeTypeByIndex=function(index){return!index||0>index?void 0:(_types.splice(index,1),_types)},CowsPurchased.types=function(){return _types},CowsPurchased}),angular.module("farmbuild.nutrientCalculator").factory("MilkSold",function(Validations){function _validateInputs(milkSoldPerYearInLitre,milkProtein,milkFat,unit){return milkSoldPerYearInLitre&&milkProtein&&milkFat&&unit&&_isPositiveNumber(milkSoldPerYearInLitre)&&_isPositiveNumber(milkProtein)&&_isPositiveNumber(milkFat)?"%"===unit&&milkProtein+milkFat>100?!1:"kg"===unit&&milkProtein+milkFat>milkSoldPerYearInLitre?!1:!0:!1}function _calculate(milkSoldPerYearInLitre,milkFatInKg,milkProteinInKg,milkProteinPercentage,milkFatPercentage){var nitrogenPercentage=milkProteinPercentage/6.33,phosphorusPercentage=.0111*milkFatPercentage+.05255,potassiumPercentage=.14,sulphurPercentage=.06,nitrogenInKg=milkSoldPerYearInLitre*nitrogenPercentage/100,potassiumInKg=milkSoldPerYearInLitre*potassiumPercentage/100,sulphurInKg=milkSoldPerYearInLitre*sulphurPercentage/100,phosphorusInKg=milkSoldPerYearInLitre*phosphorusPercentage/100;return{totalPerYearInLitre:milkSoldPerYearInLitre,fatInKg:milkFatInKg,fatPercentage:milkFatPercentage,proteinInKg:milkProteinInKg,proteinPercentage:milkProteinPercentage,nitrogenInKg:nitrogenInKg,nitrogenPercentage:nitrogenPercentage,phosphorusInKg:phosphorusInKg,phosphorusPercentage:phosphorusPercentage,potassiumInKg:potassiumInKg,potassiumPercentage:potassiumPercentage,sulphurInKg:sulphurInKg,sulphurPercentage:sulphurPercentage}}function _kgToPercentage(valueInKg,totalInLitre){return valueInKg/totalInLitre*100}function _percentageToKg(valuePercentage,totalInLitre){return valuePercentage*totalInLitre/100}var MilkSold={},_isPositiveNumber=Validations.isPositiveNumber;return MilkSold.calculateByPercent=function(milkSoldPerYearInLitre,milkProteinPercentage,milkFatPercentage){var milkProteinInKg,milkFatInKg;return _validateInputs(milkSoldPerYearInLitre,milkProteinPercentage,milkFatPercentage,"%")?(milkSoldPerYearInLitre=parseFloat(milkSoldPerYearInLitre),milkProteinPercentage=parseFloat(milkProteinPercentage),milkFatPercentage=parseFloat(milkFatPercentage),milkProteinInKg=_percentageToKg(milkProteinPercentage,milkSoldPerYearInLitre),milkFatInKg=_percentageToKg(milkFatPercentage,milkSoldPerYearInLitre),_calculate(milkSoldPerYearInLitre,milkFatInKg,milkProteinInKg,milkProteinPercentage,milkFatPercentage)):void 0},MilkSold.calculateByKg=function(milkSoldPerYearInLitre,milkProteinInKg,milkFatInKg){var milkProteinPercentage,milkFatPercentage;return _validateInputs(milkSoldPerYearInLitre,milkProteinInKg,milkFatInKg,"kg")?(milkSoldPerYearInLitre=parseFloat(milkSoldPerYearInLitre),milkProteinInKg=parseFloat(milkProteinInKg),milkFatInKg=parseFloat(milkFatInKg),milkFatPercentage=_kgToPercentage(milkFatInKg,milkSoldPerYearInLitre),milkProteinPercentage=_kgToPercentage(milkProteinInKg,milkSoldPerYearInLitre),_calculate(milkSoldPerYearInLitre,milkFatInKg,milkProteinInKg,milkProteinPercentage,milkFatPercentage)):void 0},MilkSold}),angular.module("farmbuild.nutrientCalculator").factory("Validations",function($log){var Validations={};return Validations.isPositiveNumber=function(value){return!isNaN(parseFloat(value))&&isFinite(value)&&parseFloat(value)>0},Validations.isAlphabet=function(value){var regex=/^[A-Za-z]+$/gi;return regex.test(value)},Validations.isAlphanumeric=function(value){var regex=/^[a-zA-Z0-9]*[a-zA-Z]+[a-zA-Z0-9 _]*$/gi;return regex.test(value)},Validations}),angular.module("farmbuild.nutrientCalculator").constant("references",{cowTypes:[{name:"Heavy adult cattle",weight:650},{name:"Average adult cattle",weight:500},{name:"Yearling",weight:300},{name:"Weaned young stock",weight:120},{name:"Bobby calve",weight:40}]}),angular.module("farmbuild.nutrientCalculator").run(function(NutrientCalculator){}),"undefined"==typeof window.farmbuild?window.farmbuild={nutrientcalculator:{}}:window.farmbuild.nutrientcalculator={},angular.injector(["ng","farmbuild.nutrientCalculator"]);
//# sourceMappingURL=farmbuild-nutrientcalculator.min.js.map